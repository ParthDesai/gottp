{"name":"Gottp","tagline":"A tiny golang web framework","body":"gottp\r\n=====\r\n\r\nGottp is not a regular front-end server to do customer facing websites. It has been designed using backend servers in mind. It offers a variety of features like Call Aggregation using Asynchronous or Blocking Pipes very much like Batch requests in Graph API. https://developers.facebook.com/docs/graph-api/making-multiple-requests\r\n\r\n\r\nInstallation\r\n=============\r\n```\r\ngo get github.com/Simversity/gottp\r\n```\r\n\r\nGetting Started\r\n===============\r\n\r\n*A sample application named helloWorld is available inside the tests directory of your checkout*\r\n\r\nTo start building a web service using gottp just create a new project with the following structure.\r\n\r\n  * conf.go -> Configuration\r\n  * main.go -> main Server engine\r\n  * urls.go -> Register acceptable urls & handlers.\r\n  * handlers/hello.go -> Register handlers that process the request.\r\n\r\n\r\nconf.go\r\n-------\r\n\r\nA minimalist configuration looks like:\r\n\r\n```\r\npackage main\r\n\r\nimport \"github.com/Simversity/gottp\"\r\n\r\ntype config struct {\r\n\tGottp gottp.SettingsMap\r\n}\r\n\r\nfunc (self *config) MakeConfig(configPath string) {\r\n\tgottp.Settings = self.Gottp\r\n}\r\n\r\nvar settings config\r\n```\r\n\r\nmain.go\r\n-------\r\n\r\nA sample main.go would look like:\r\n\r\n```\r\npackage main\r\n\r\nimport (\r\n    \"log\"\r\n\t\"github.com/Simversity/gottp\"\r\n)\r\n\r\nfunc sysInit() {\r\n\t<-(gottp.SysInitChan) //Buffered Channel to receive the server upstart boolean\r\n\tlog.Println(\"System is ready to Serve\")\r\n}\r\n\r\nfunc main() {\r\n\tgo sysInit()\r\n\tgottp.BindHandlers(urls) //Urls is a slice of all the registered urls.\r\n\tgottp.MakeServer(&settings)\r\n}\r\n```\r\n\r\nurls.go\r\n-------\r\n\r\nUrls are of type gottp.Url\r\n\r\n```\r\ntype Url struct {\r\n\tname    string //shortname of the url\r\n\turl     string //provided regular pattern\r\n\thandler func(r *Request) //ReuqestHandler \r\n\tpattern *regexp.Regexp //Compiled Regular Expression\r\n}\r\n```\r\n\r\nA sample urls.go looks like:\r\n\r\n```\r\npackage main\r\n\r\nimport (\r\n\t\"github.com/Simversity/gottp\"\r\n)\r\n\r\nvar urls = []*gottp.Url{\r\n    gottp.NewUrl(\"hello\", \"/hello/\\\\w{3,5}/?$\", handlers.HelloMessage),\r\n}\r\n```\r\n\r\nThis would match all urls that are like \"/hello/world\" or \"/hello/greet\"\r\n\r\nhandlers.go\r\n-----------\r\n\r\nA sample handler looks like:\r\n\r\n```\r\npackage handlers\r\n\r\nimport (\r\n\t\"github.com/Simversity/gottp\"\r\n)\r\n\r\nfunc HelloMessage(req *gottp.Request) {\r\n    req.Write(\"hello world\")\r\n}\r\n```\r\n\r\nBuild & Run\r\n-----------\r\n\r\n```\r\ngo install test && test\r\n```\r\n\r\nPoint your browser to http://127.0.0.1:8005/hello/check\r\n\r\nShould give you a JSON output:\r\n\r\n```\r\n{\r\n    \"data\": \"hello world\",\r\n    \"message\": \"\",\r\n    \"status\": 200\r\n}\r\n```\r\n\r\nAvailable URLs\r\n==============\r\n\r\nYou can visit http://127.0.0.1:8005/urls to access the URLs exposed by your application.\r\n\r\nSample Output:\r\n\r\n```\r\n{\r\n    \"data\": {\r\n        \"hello\": \"/hello/\\\\w{3,5}/?$\"\r\n    },\r\n    \"message\": \"\",\r\n    \"status\": 200\r\n}\r\n```\r\n\r\nCommand Line Options & CFG files\r\n================================\r\n\r\nTo be documented\r\n\r\nPipes & Async Pipes\r\n===================\r\n\r\nTo be documented\r\n\r\nError Reporting\r\n===============\r\n\r\nTo be documented\r\n\r\nAccessing Request Arguments\r\n===========================\r\n\r\nTo be documented\r\n=======\r\n... Working on Documentation, Should be available soon ...\r\n","google":"UA-51523362-1","note":"Don't delete this file! It's used internally to help with page regeneration."}